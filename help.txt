
>>> help("tkinter.Tk")
Help on class Tk in tkinter:

tkinter.Tk = class Tk(Misc, Wm)
 |  Toplevel widget of Tk which represents mostly the main window
 |  of an application. It has an associated Tcl interpreter.
 |



>>> help("datetime.timedelta")
Help on class timedelta in datetime:

datetime.timedelta = class timedelta(builtins.object)
 |  Difference between two datetime values.



>>> help('min')
Help on built-in function min in module builtins:

min(...)
    min(iterable, *[, default=obj, key=func]) -> value
    min(arg1, arg2, *args, *[, key=func]) -> value

    With a single iterable argument, return its smallest item. The
    default keyword-only argument specifies an object to return if
    the provided iterable is empty.
    With two or more arguments, return the smallest argument.



>>> help('tkinter.Canvas')
Help on class Canvas in tkinter:

tkinter.Canvas = class Canvas(Widget, XView, YView)
 |  Canvas widget to display graphical elements like lines or text.
 |
 |  __init__(self, master=None, cnf={}, **kw)
 |      Construct a canvas widget with the parent MASTER.
 |
 |      Valid resource names: background, bd, bg, borderwidth, closeenough,
 |      confine, cursor, height, highlightbackground, highlightcolor,
 |      highlightthickness, insertbackground, insertborderwidth,
 |      insertofftime, insertontime, insertwidth, offset, relief,
 |      scrollregion, selectbackground, selectborderwidth, selectforeground,
 |      state, takefocus, width, xscrollcommand, xscrollincrement,
 |      yscrollcommand, yscrollincrement.



>>> help('tkinter.Canvas.pack')
Help on function pack_configure in tkinter.Canvas:

tkinter.Canvas.pack = pack_configure(self, cnf={}, **kw)
    Pack a widget in the parent widget. Use as options:
    after=widget - pack it after you have packed widget
    anchor=NSEW (or subset) - position widget according to
                              given direction
    before=widget - pack it before you will pack widget
    expand=bool - expand widget if parent size grows
    fill=NONE or X or Y or BOTH - fill widget if widget grows
    in=master - use master to contain this widget
    in_=master - see 'in' option description
    ipadx=amount - add internal padding in x direction
    ipady=amount - add internal padding in y direction
    padx=amount - add padding in x direction
    pady=amount - add padding in y direction
    side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.



>>> help('tkinter.Canvas.bind')
Help on function bind in tkinter.Canvas:

tkinter.Canvas.bind = bind(self, sequence=None, func=None, add=None)
    Bind to this widget at event SEQUENCE a call to function FUNC.

    SEQUENCE is a string of concatenated event
    patterns. An event pattern is of the form
    <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one
    of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,
    Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,
    B3, Alt, Button4, B4, Double, Button5, B5 Triple,
    Mod1, M1. TYPE is one of Activate, Enter, Map,
    ButtonPress, Button, Expose, Motion, ButtonRelease
    FocusIn, MouseWheel, Circulate, FocusOut, Property,
    Colormap, Gravity Reparent, Configure, KeyPress, Key,
    Unmap, Deactivate, KeyRelease Visibility, Destroy,
    Leave and DETAIL is the button number for ButtonPress,
    ButtonRelease and DETAIL is the Keysym for KeyPress and
    KeyRelease. Examples are
    <Control-Button-1> for pressing Control and mouse button 1 or
    <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
    An event pattern can also be a virtual event of the form
    <<AString>> where AString can be arbitrary. This
    event can be generated by event_generate.
    If events are concatenated they must appear shortly
    after each other.

    FUNC will be called if the event sequence occurs with an
    instance of Event as argument. If the return value of FUNC is
    "break" no further bound function is invoked.

    An additional boolean parameter ADD specifies whether FUNC will
    be called additionally to the other bound function or whether
    it will replace the previous function.

    Bind will return an identifier to allow deletion of the bound function with
    unbind without memory leak.

    If FUNC or SEQUENCE is omitted the bound function or list
    of bound events are returned.



>>> help('tkinter.Canvas.delete')
Help on function delete in tkinter.Canvas:

tkinter.Canvas.delete = delete(self, *args)
    Delete items identified by all tag or ids contained in ARGS.



>>> help('tkinter.Canvas.winfo_width')
Help on function winfo_width in tkinter.Canvas:

tkinter.Canvas.winfo_width = winfo_width(self)
    Return the width of this widget.



>>> help('tkinter.Canvas.winfo_height')
Help on function winfo_height in tkinter.Canvas:

tkinter.Canvas.winfo_height = winfo_height(self)
    Return height of this widget.



>>> help('tkinter.Tk.after')
Help on function after in tkinter.Tk:

tkinter.Tk.after = after(self, ms, func=None, *args)
    Call function once after given time.

    MS specifies the time in milliseconds. FUNC gives the
    function which shall be called. Additional parameters
    are given as parameters to the function call.  Return
    identifier to cancel scheduling with after_cancel.



>>> help('datetime.datetime.timetuple')
Help on method_descriptor in datetime.datetime:

datetime.datetime.timetuple = timetuple(...)
    Return time tuple, compatible with time.localtime().



>>> import math
>>> help('math.sin')
Help on built-in function sin in math:

math.sin = sin(...)
    sin(x)

    Return the sine of x (measured in radians).



>>> help('math.cos')
Help on built-in function cos in math:

math.cos = cos(...)
    cos(x)

    Return the cosine of x (measured in radians).



>>> help('tkinter.Canvas.create_text')
Help on function create_text in tkinter.Canvas:

tkinter.Canvas.create_text = create_text(self, *args, **kw)
    Create text with coordinates x1,y1.



>>> help('eval')
Help on built-in function eval in module builtins:

eval(source, globals=None, locals=None, /)
    Evaluate the given source in the context of globals and locals.

    The source may be a string representing a Python expression
    or a code object as returned by compile().
    The globals must be a dictionary and locals can be any mapping,
    defaulting to the current globals and locals.
    If only globals is given, locals defaults to it.



>>> help('tkinter.Canvas.create_line')
Help on function create_line in tkinter.Canvas:

tkinter.Canvas.create_line = create_line(self, *args, **kw)
    Create line with coordinates x1,y1,...,xn,yn.



>>> help('tkinter.Canvas.create_oval')
Help on function create_oval in tkinter.Canvas:

tkinter.Canvas.create_oval = create_oval(self, *args, **kw)
    Create oval with coordinates x1,y1,x2,y2.



>>> help('tkinter.Tk.title')
Help on function wm_title in tkinter.Tk:

tkinter.Tk.title = wm_title(self, string=None)
    Set the title of this widget.



>>> help('str.join')
Help on method_descriptor in str:

str.join = join(...)
    S.join(iterable) -> str

    Return a string which is the concatenation of the strings in the
    iterable.  The separator between elements is S.























